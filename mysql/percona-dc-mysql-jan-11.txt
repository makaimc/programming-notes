Percona Live MySQL DC - Jan. 11, 2012
Keynote - Peter Zaitsev
-----------------------
> proprietary software necessary in some cases and better to have
  proprietary options than no options at all
> Oracle new steward of MySQL, made contributions to 5.5 and 5.6
> good signs the community is being listened to
> Percona DB drop-in replacement for MySQL, optimized for high end
> Percona has optimizations for SSDs
> Maria DB - lead by MySQL founder Monty Widenius
> Drizzle - 100+ developers from many companies, micro kernel architecture,
  best used for new development because it is not a drop-in replacement
> Clustrix, SchoonerSQL are other interesting database MySQL-derived
  community projects
> Percona XtraDB Cluster - multi-threaded syncrhonous replication for InnoDB

Tom Daley - Dyn (DNS Services)
  What's your real tolerance?
-------------------------------
> Dyn has used MySQL for core operations since 1998
> DNS configuration data: guaranteed global transaction durability &
  replication out to the edges
> "CAP theorem sucks" - 430 ms of latency worldwide (and that's min
  theoretical latency)
> partition tolerance - sometimes data centers go offline for awhile then
  suddenly come back up again (is the data up to date?)
> figure out the absolute critical functionality, partition from the optional

Innodb Internals
  by Peter Zaitsev
------------------
> MySQL 5.5 current release
> MySQL 5.6 development release
> traditional OLTP engine, which emulates the Oracle architecture
> all data stored in tablespaces (single or multiple tablespaces)
> write-ahead logging - changes MUST be stored in the log files before they
  can be reflected in the tables
> tablespace format - collection of segments (which are like files)
> a segment is a number of extents, typically 64 of 16K page sizes
> smaller extents for very small objects
> Innodb has "index of organized tables"
> each index has both leaf node segment and non-leaf node segments
> special segments for rollback and inserting buffers
> logs are stored in a "circular" format where oldest ones are erased
  to make room for new ones
> only REDO operations are stored in the logs
> log record format is "physiological" - hybrid of physical and logical
> separate undo tablespace in MySQL 5.6
> MySQL normally uses a thread per connection (no more than 1 thread per
  connection)
> transactions handled through the threads
> complex queries can only be executed on a single CPU core at a time!
> innodb_thread_concurrency can be used to limit the number of executing
  threads to reduce contention
> helper threads in Innodb - main, IO, purge, and deadlock detection
> purge threads from MySQL 5.5
> memory allocation - most memory allocated in the buffer pool
> most reads are done by executing threads, read-ahead is performed
  by background threads
> one problem you can encounter with MySQL is that if there are a lot of
  writes but it cannot flush to disk fast enough, there will be a crash in
  the number of transactions per second
> LRU flushes - can happen in workloads with data sets larger than memory
  when Innodb is unable to find a clean page in 10% of the LRU list
> Double write buffer - Innodb log requires consistent pages for recovery
> Innodb tables are "Index Organized"
> PRIMARY KEY contains data instead of data pointer
> a hidden PRIMARY KEY is used if not explicitly defined

Monitoring MySQL (at aol)
-------------------------
> ORB is AOL's Configuration Management Database (CMDB), cannot stand up 
  a server without registering with this centralized system
> ORB is AOL's authoritative source
> AOL is beginning to use Argus, allows visualization, configuration UI,
  data collection, and availability
> Nagios - tool great for fault-detection/alerting, "show me what is currently
  broken" and service availability metrics
> Argus currently tracking ~350 MySQL metrics at AOL
> tracking number of threads running is a great way to determine if 
  MySQL performance is degrading
> be mindful of too much monitoring - eventually people set up filters, so
  alarms MUST be actionable or people will ignore them
> Monitoring allows you to move from reactive to proactive when you can
  inspect and look for trends
> Monitoring resources:
  -> http://www.jedi.be/blog/
  -> http://holmwood.id.au/~lindsay/
  -> http://palominodb.com/about-us/project


Proactive Database Administration
---------------------------------
> why does downtime happen?
> which failures are most common?
> what could have prevented the incidents?
> research based on Percona's incidents (154) which could be examined for
  notes, screen captures, etc.
> #1 cause of downtime is change - either change that is taken not
  cautiously (like upgrades) or the changes you need to make but
  do not (like replace a disk in a RAID array that already has a failure)
> monitoring helps prevent downtime through proactive analysis of your
  environment - but only very specific tasks actually help
> it's important to document proactivity
