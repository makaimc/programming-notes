from Java to Erlang
  by Ryan Zezeski
-------------------

> you say "class" I say "data"
> Maven = Rebar
> J2EE = OTP
> mapping Java ideas to Erlang ideas
> Erlang has no notion of a class, and while a module looks like a class,
  it is not actually a class
> "it is better to have 100 functions operate on one data structure than
  10 functions on 10 data structures" ~ Alan Perlis
> many "flavors" of methods in Java, i.e. public/private, static
> Erlang has functions which live in modules, which group similar functions
  together
> Erlang has no return statement (exceptions can sort of mimic this behavior)
> the last expression in an Erlang function is the return value
> all functions are first class in Erlang (functions are like data)
> organizing modules is like organizing classes/packages
> Erlang has a flat namespace (in Java this would be like everything living
  in the same namespace) - Erlang gets around this by prefixing functions with
  module names
> Erlang functions can be public/private but they are only made public
  by exporting them
> from packages/JARs to Applications
> in Java, JARs are how you ship code, with many JARs put together to make
  an application
> an Erlang Application is like a JAR, most commonly called "OTP Application"
> from Java variables to Erlang symbols
> Erlang symbols are immutable
> Java loves mutability, which causes many side effects
> "Change" in Erlang is really a modified copy
> Higher Order Functions replace loops (declarative iteration over items)
> Erlang's higher order functions are more declarative, it's "what" not "how"
> Java 'getters' versus Erlang 'destructure' -> pull apart data in the
  same way you built it up
> if/switch/Polymorphism to Pattern Matching
> pattern matching uses destructuring to dispatch to different behaviors
> from Classes/Objects/Threads to Processes (but really Processes are
  unlike anything in Java)
> Processes have a loose notion of a type, and are the mechanism for
  concurrency
> Erlang processes are NOT OS processes or Java threads!
> Processes are much cheaper to set up and tear down
> Processes live only in the Erlang virtual machine
> Processes can be equated to the Actor model
> from methods to Message Passing
> Erlang processes talk through Message Passing
> messages are copied like a full deep clone, which can potentially be
  expensive (but there are upsides to this)
> each process has its own heap
> Containers/JARs/WARs/EARs/J2EE to OTP
> OTP is like the plumbling for applications. "It's Erlang to help you
  build Erlang."
> Behaviors are like Containers
> Callbacks are business logic
> from Exceptions to "Let it crash"/Process Trees/Supervisors
> Supervisors supervising Supervisors (to prevent crashes from causing the
  whole application to fail)
> Erlang has Rebar for builds (previously developers just used make)
> Rebar is trying to create a common language around Erlang builds and
  is written in Erlang
