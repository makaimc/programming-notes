Cocoa Fundamentals Guide
------------------------
> the goal of Cocoa is when you become familiar with Cocoa, it will make it easier
  to build apps for both iOS and Mac OS X
> Cocoa Fundamentals Guide is the conceptual entry-point for all other Cocoa
  development guides

What is Cocoa?
--------------
> an application environment for both Mac OS X and iOS
> a suite of object-oriented libraries, a runtime system, and an IDE
> Cocoa is the only application environment for iOS
> both a runtime and development aspect
> Cocoa classes exist for a large number of development tasks
> iOS has two core frameworks: Foundation and UIKit (Mac OS X has AppKit)
> application-framework layer of iOS is called Cocoa Touch
> Cocoa iOS Core OS: kernel, file system, networking, security, power management,
  and device drivers. Includes sytem-level APIs for many services.
> Core Services: string manipulation, collection management, networking,
  preferences, as well as specific hardware features such as GPS or accelerometer
> Core Services includes both Foundation and Core Foundation frameworks
> Media: depends on Core Services layer and provides multimedia and graphics
  capabilities to Cocoa Touch applications (for example, Core Graphics & OpenGL 
  ES)
> Cocoa Touch: frameworks that directly support iOS applications, such as
  Game Kit, Map Kit, and iAd
> all Cocoa programs are composed of objects that inherit originally from
  the root class NSObject
> you cannot create an iOS app without linking and using the classes of
  UIKit
> Foundation framework goals:
  1. Define object behavior & consistent conventions for memory management,
     object mutability, and notifications
  2. Support internationalization and localization
  3. Support object persistence & distribution
  4. Provide a level of operating system independence to assist portability
  5. Provide object wrappers for primitives
> Foundation was designed with the following design patterns:
  1. Object retention and disposal - provide garbage collection
  2. Mutable class variants - you can pass mutable instances to methods
     that take an immutable type because they inherit from them
  3. Class clusters - abstract class and set of private concrete subclasses
  4. Notifications - design pattern based on a broadcast mechanism that
     allows objects (observers) to receive messages but not need to be
     aware of the existence of the sender (synchronous, async, and distributed
     message types all exist) - see NSNotification, NSNotificationCenter,
     NSNotificationQueue, and NSDistributedNotificationCenter classes
> Value objects encapsulate values of primitive types, including strings,
  numbers, dates, pointers, and data structures
> Value objects compare encapsulated values, not pointer values
> most methods in the Cocoa framework use value objects for return values
> some object values have both mutable and immutable variants, for example
  NSMutableData and NSData
> NSValue - encapsulate a data item such as a floating-point value, pointer,
  or data structure
> NSNumber - numeric values such as integers, floats, and doubles
> NSData - object-oriented storage for byte streams such as image data
> NSDate - parent class of many date and time specific object types
> NSString - storage for a sequence of Unicode characters
> NSFormatter - not value objects but convert instances to and from string
  representations

UIKit
-----
> event-handling and drawing models for iOS and Mac OS X are very different
> Three ways to add UIKit objects to an application's user interface:
  1. Use Interface Builder to drag windows, views, and objects from a library
  2. Create, position, and configure framework objects programmatically
  3. Implement custom UI objects by subclassing UIView or a class that inherits
     from UIView
> 

A Bit of History
----------------
> Cocoa used to be known as NeXTSTEP, originally released in Sept 1989
> NeXTSTEP 3.3 was the initial release of Foundation (in 1993)
