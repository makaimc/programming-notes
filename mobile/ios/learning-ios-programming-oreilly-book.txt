Learning iOS Programming
  by Alasdair Allan
-------------------

Chapter 1 - Why Go Native?
--------------------------
> native applications can take advantage of phone hardware such as geolocation
  and OpenGL, which HTML5 webapps cannot use without a webapp-to-native wrapper
> native iOS apps are more like traditional software programs for the desktop
  in their release cycle (as opposed to continuous delivery of web apps)

Chapter 2 - Becoming a Developer
--------------------------------
> 3 main websites part of the iPhone development process: iOS Dev Center,
  iOS Provisioning Portal, and iTunes Connect
> iOS Dev Center - access to latest iOS SDK and technical information
> iOS Provisioning Portal - generate and manage certificates and other tasks
  around app distribution
> iTunes Connect - tools for managing apps on iTunes App Store

Chapter 3 - Your First iOS App
------------------------------
> class - blueprint for objects, class definition determines object structure
> object - collection of operations (methods) and data, occupies space in
  memory and can perform operations (invoke methods) on the data
> event - message generated by user interacting with application's controls
> protocol - declares methods that any class can implement
> delegate class - class that implements a protocol for handling events
> Objective-C derives object syntax from Smalltalk
> messages are sent to object instances instead of invoking methods
> invoking methods - implies knowing about that method, sending a message leaves
  the receiver of the message to determine what to do with the message
> Objective-C is more dynamic at runtime than method-invocation style languages
  because you do not need to know the type of an object before sending a message
> if a receiving object does not understand the message it will ignore it and
  return nil
> in Objective-C, objects are represented by the generic 'id' type
> Objective-C memory is managed through reference counting
> in iOS 5, Automatic Reference Counting (ARC) handles memory management
  automatically
> ARC is a compiler-level feature that automatically inserts calls into code
  at appropriate times for memory management
> reference counting is considered one of the simplest forms of garbage collection
  algorithms
> iOS MVC pattern encourages delegate classes instead of subclasses (implementation
  of class protocols instead)
> [anObject someMethod] // this is a method call, someMethod message is sent 
  to anObject object
> [anObject someMethod: anotherObject]; // another method call, this time
  someMethod sends anotherObject as a parameter
> do not use spaces in the Product Name when creating a new project as it confuses
  earlier versions of Xcode (does this matter anymore?)
> Symbol Navigator - browse symbols in project and navigate through Classes,
  Protocols, Functions, Structs, Unions, Enums, Types, and Globals
> the application delegate receives messages from the main event loop (in main()),
  and handles critical system messages, such as launching, terminating, etc.
> every iOS app must contain an application delegate object
> the UIWindow class defines an object that coordinates the views on the screen
> 
